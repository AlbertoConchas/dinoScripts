//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
namespace Assets.My_Assets.dinoScripts.search.bayesiannetwork
{
	public class BayesianNode
	{
		private string name;
		public string Name
		{
			get { return name; }
			set { this.name = value;}
		}

		private BayesianNode parent;
		public BayesianNode Parent
		{
			get { return parent; }
			set { this.parent = value;}
		}

		private Dictionary<string, BayesianNode> children;
		public Dictionary<string, BayesianNode> Children
		{
			get { return children; }
			set { this.children = value;}
		}

		private Dictionary<string, Value> values;
		public Dictionary<string, Value> Values
		{
			get { return values; }
			set { this.values = value;}
		}

		private Dictionary<string, float> lambdas;
		public Dictionary<string, float> Lambdas
		{
			get { return lambdas; }
			set { this.lambdas = value;}
		}

		private Dictionary<string, float> pis;
		public Dictionary<string, float> Pis
		{
			get { return pis; }
			set { this.pis = value;}
		}

		public BayesianNode (string name, Dictionary<string, Value> values)
		{
			this.name = name;
			parent = null;
			this.children = new Dictionary<string, BayesianNode>();
			this.values = values;
			this.lambdas = new Dictionary<string, float>();
			this.pis = new Dictionary<string, float>();
		}

		public bool Equals(BayesianNode p)
		{
			return p.name == this.name;
		}

		public override int GetHashCode()
		{
			return this.name.GetHashCode();
		}

		public override string ToString()
		{
			string rep = this.name + "\nlambda values:\n";
			foreach(KeyValuePair<string, Value> value in this.values)
            {
                rep = rep + value.Key.ToString() + "=" + value.Value.Lambdav + "\n";
            }
			rep = rep + "\npi values:\n";
            foreach (KeyValuePair<string, Value> value in this.values)
            {
                rep = rep + value.Key.ToString() + "=" + value.Value.Piv + "\n";
            }
			rep = rep + "\nprobabilities:\n";
			foreach(KeyValuePair<string, Value> entry in this.values)
			{
				foreach(KeyValuePair<string, float> prob in entry.Value.Probs)
				{
					rep = rep + entry.Key.ToString() + "|" + prob.Key + "=" + prob.Value.ToString() + "\n";
				}
			}
			rep = rep + "\n";
			return rep;
		}
	}
}

